export interface EmotionAnalysis {
  primaryEmotion: string;
  intensity: 'low' | 'medium' | 'high';
  confidence: number;
  secondaryEmotions: string[];
  sentiment: 'positive' | 'negative' | 'neutral';
  topics: string[];
}

export function detectEmotion(message: string): EmotionAnalysis {
  const lowerMessage = message.toLowerCase();
  const thaiMessage = message;
  
  // Thai emotion keywords
  const thaiEmotions = {
    happy: ['‡∏î‡∏µ‡πÉ‡∏à', '‡∏™‡∏∏‡∏Ç', '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ', '‡∏™‡∏ô‡∏∏‡∏Å', '‡∏ä‡∏≠‡∏ö', '‡∏£‡∏±‡∏Å', '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì', '‡∏Ç‡∏≠‡∏ö‡πÉ‡∏à', '‡∏î‡∏µ', '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°', '‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î'],
    sad: ['‡πÄ‡∏®‡∏£‡πâ‡∏≤', '‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à', '‡∏´‡∏î‡∏´‡∏π‡πà', '‡∏ó‡πâ‡∏≠', '‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢', '‡πÄ‡∏ö‡∏∑‡πà‡∏≠', '‡πÄ‡∏´‡∏á‡∏≤', '‡πÇ‡∏î‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß', '‡∏™‡∏¥‡πâ‡∏ô‡∏´‡∏ß‡∏±‡∏á'],
    angry: ['‡πÇ‡∏Å‡∏£‡∏ò', '‡πÇ‡∏°‡πÇ‡∏´', '‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î', '‡∏£‡∏≥‡∏Ñ‡∏≤‡∏ç', '‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à', '‡πÅ‡∏¢‡πà', '‡πÄ‡∏•‡∏ß', '‡πÄ‡∏Å‡∏•‡∏µ‡∏¢‡∏î'],
    anxious: ['‡∏Å‡∏±‡∏á‡∏ß‡∏•', '‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î', '‡∏ß‡∏¥‡∏ï‡∏Å', '‡∏Å‡∏•‡∏±‡∏ß', '‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à', '‡∏•‡∏±‡∏á‡πÄ‡∏•', '‡∏™‡∏±‡∏ö‡∏™‡∏ô'],
    excited: ['‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô', '‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á', '‡∏≠‡∏¢‡∏≤‡∏Å', '‡∏£‡∏≠', '‡∏à‡∏∞', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞'],
    calm: ['‡∏™‡∏á‡∏ö', '‡πÄ‡∏¢‡πá‡∏ô', '‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢', '‡∏™‡∏ö‡∏≤‡∏¢', '‡πÇ‡∏≠‡πÄ‡∏Ñ', '‡πÑ‡∏î‡πâ', '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£'],
    confused: ['‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à', '‡∏á‡∏á', '‡∏™‡∏±‡∏ö‡∏™‡∏ô', '‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ', '‡∏≠‡∏∞‡πÑ‡∏£', '‡∏¢‡∏±‡∏á‡πÑ‡∏á', '‡∏ó‡∏≥‡πÑ‡∏°']
  };
  
  // English emotion keywords
  const englishEmotions = {
    happy: ['happy', 'joy', 'excited', 'love', 'like', 'great', 'awesome', 'wonderful', 'amazing', 'thank'],
    sad: ['sad', 'depressed', 'lonely', 'tired', 'bored', 'hopeless', 'miserable', 'upset'],
    angry: ['angry', 'mad', 'furious', 'hate', 'annoyed', 'frustrated', 'terrible', 'awful'],
    anxious: ['worried', 'anxious', 'stressed', 'afraid', 'scared', 'nervous', 'uncertain'],
    excited: ['excited', 'looking forward', 'can\'t wait', 'anticipate', 'hope'],
    calm: ['calm', 'relaxed', 'okay', 'fine', 'alright', 'good'],
    confused: ['confused', 'don\'t understand', 'what', 'how', 'why', 'unsure']
  };
  
  // Analyze emotions
  const emotionScores: Record<string, number> = {};
  
  // Check Thai emotions
  Object.entries(thaiEmotions).forEach(([emotion, keywords]) => {
    keywords.forEach(keyword => {
      if (thaiMessage.includes(keyword)) {
        emotionScores[emotion] = (emotionScores[emotion] || 0) + 1;
      }
    });
  });
  
  // Check English emotions
  Object.entries(englishEmotions).forEach(([emotion, keywords]) => {
    keywords.forEach(keyword => {
      if (lowerMessage.includes(keyword)) {
        emotionScores[emotion] = (emotionScores[emotion] || 0) + 1;
      }
    });
  });
  
  // Find primary emotion
  let primaryEmotion = 'neutral';
  let maxScore = 0;
  
  Object.entries(emotionScores).forEach(([emotion, score]) => {
    if (score > maxScore) {
      maxScore = score;
      primaryEmotion = emotion;
    }
  });
  
  // Determine intensity
  let intensity: 'low' | 'medium' | 'high' = 'low';
  if (maxScore >= 3) intensity = 'high';
  else if (maxScore >= 1) intensity = 'medium';
  
  // Calculate confidence
  const totalKeywords = Object.values(emotionScores).reduce((sum, score) => sum + score, 0);
  const confidence = totalKeywords > 0 ? Math.min(maxScore / totalKeywords, 1) : 0;
  
  // Get secondary emotions
  const secondaryEmotions = Object.entries(emotionScores)
    .filter(([emotion, score]) => emotion !== primaryEmotion && score > 0)
    .sort(([, a], [, b]) => b - a)
    .slice(0, 2)
    .map(([emotion]) => emotion);
  
  // Determine sentiment
  let sentiment: 'positive' | 'negative' | 'neutral' = 'neutral';
  if (['happy', 'excited', 'calm'].includes(primaryEmotion)) {
    sentiment = 'positive';
  } else if (['sad', 'angry', 'anxious', 'confused'].includes(primaryEmotion)) {
    sentiment = 'negative';
  }
  
  // Extract topics
  const topics: string[] = [];
  const topicKeywords = {
    work: ['‡∏á‡∏≤‡∏ô', 'work', 'job', 'office', 'company', 'boss'],
    study: ['‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', 'study', 'school', 'university', 'exam', 'test', 'homework'],
    family: ['‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß', 'family', '‡∏û‡πà‡∏≠', '‡πÅ‡∏°‡πà', 'mom', 'dad', 'parent'],
    friends: ['‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô', 'friend', '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÜ', 'friends'],
    health: ['‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', 'health', '‡∏õ‡πà‡∏ß‡∏¢', 'sick', 'doctor', 'hospital'],
    love: ['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å', 'love', '‡πÅ‡∏ü‡∏ô', 'boyfriend', 'girlfriend', 'relationship'],
    money: ['‡πÄ‡∏á‡∏¥‡∏ô', 'money', 'cash', 'salary', 'income', 'expensive', 'cheap'],
    future: ['‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï', 'future', 'dream', 'goal', 'plan', 'ambition']
  };
  
  Object.entries(topicKeywords).forEach(([topic, keywords]) => {
    keywords.forEach(keyword => {
      if (lowerMessage.includes(keyword) || thaiMessage.includes(keyword)) {
        if (!topics.includes(topic)) {
          topics.push(topic);
        }
      }
    });
  });
  
  return {
    primaryEmotion,
    intensity,
    confidence,
    secondaryEmotions,
    sentiment,
    topics
  };
}

export function getEmotionResponse(emotion: string, intensity: string): string {
  const responses: Record<string, Record<string, string[]>> = {
    happy: {
      low: ['‡∏î‡∏µ‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üòä', '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏î‡∏µ‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö'],
      medium: ['‡∏î‡∏µ‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! üòä', '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏°‡∏±‡∏ô‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö'],
      high: ['‡∏î‡∏µ‡πÉ‡∏à‡∏™‡∏∏‡∏î‡πÜ ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! üéâ', '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡πÜ ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!', '‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏î‡∏µ‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ü•≥']
    },
    sad: {
      low: ['‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÑ‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πá‡πÄ‡∏®‡∏£‡πâ‡∏≤‡πÑ‡∏î‡πâ', '‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö'],
      medium: ['‡πÄ‡∏®‡∏£‡πâ‡∏≤‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö... ‡∏ú‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÑ‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏°‡∏≠'],
      high: ['‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö... ü•∫ ‡∏ú‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢', '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö üíô']
    },
    angry: {
      low: ['‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πá‡πÇ‡∏Å‡∏£‡∏ò‡πÑ‡∏î‡πâ', '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏™‡∏á‡∏ö‡∏™‡∏ï‡∏¥‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ñ‡∏£‡∏±‡∏ö', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö'],
      medium: ['‡πÇ‡∏Å‡∏£‡∏ò‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö... ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å‡πÜ ‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πá‡πÇ‡∏Å‡∏£‡∏ò‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÜ', '‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏™‡∏á‡∏ö‡∏™‡∏ï‡∏¥‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠'],
      high: ['‡πÇ‡∏Å‡∏£‡∏ò‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö... üò§ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å‡πÜ ‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏°‡∏±‡∏ô‡∏Å‡πá‡πÇ‡∏Å‡∏£‡∏ò‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÜ', '‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏™‡∏á‡∏ö‡∏™‡∏ï‡∏¥‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö']
    },
    anxious: {
      low: ['‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÑ‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πá‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÑ‡∏î‡πâ', '‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö'],
      medium: ['‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö... ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å‡πÜ ‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πá‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÜ', '‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÑ‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö'],
      high: ['‡∏Å‡∏±‡∏á‡∏ß‡∏•‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡πÄ‡∏´‡∏£‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö... üò∞ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å‡πÜ ‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö', '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÜ', '‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÑ‡∏õ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö']
    }
  };
  
  const emotionResponses = responses[emotion];
  if (!emotionResponses) return '';
  
  const intensityResponses = emotionResponses[intensity];
  if (!intensityResponses) return '';
  
  return intensityResponses[Math.floor(Math.random() * intensityResponses.length)];
}
